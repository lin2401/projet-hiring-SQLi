package com.hiring.entities;
// Generated 10 oct. 2018 14:34:30 by Hibernate Tools 5.1.10.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "hiring")
public class Question implements java.io.Serializable {

	private int idquestion;
	private Level level;
	private QuestionType questionType;
	private Skill skill;
	private String title;
	private String statement;
	private Set candidateAnswerProvideds = new HashSet(0);
	private Set questionExpectedAnswers = new HashSet(0);
	private Set assessments = new HashSet(0);
	private Set questionProposals = new HashSet(0);

	public Question() {
	}

	public Question(int idquestion, Level level, QuestionType questionType, Skill skill) {
		this.idquestion = idquestion;
		this.level = level;
		this.questionType = questionType;
		this.skill = skill;
	}

	public Question(int idquestion, Level level, QuestionType questionType, Skill skill, String title, String statement,
			Set candidateAnswerProvideds, Set questionExpectedAnswers, Set assessments, Set questionProposals) {
		this.idquestion = idquestion;
		this.level = level;
		this.questionType = questionType;
		this.skill = skill;
		this.title = title;
		this.statement = statement;
		this.candidateAnswerProvideds = candidateAnswerProvideds;
		this.questionExpectedAnswers = questionExpectedAnswers;
		this.assessments = assessments;
		this.questionProposals = questionProposals;
	}

	@Id

	@Column(name = "idquestion", unique = true, nullable = false)
	public int getIdquestion() {
		return this.idquestion;
	}

	public void setIdquestion(int idquestion) {
		this.idquestion = idquestion;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "level_idlevel", nullable = false)
	public Level getLevel() {
		return this.level;
	}

	public void setLevel(Level level) {
		this.level = level;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "question_type_idquestion_type", nullable = false)
	public QuestionType getQuestionType() {
		return this.questionType;
	}

	public void setQuestionType(QuestionType questionType) {
		this.questionType = questionType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "skill_idskill", nullable = false)
	public Skill getSkill() {
		return this.skill;
	}

	public void setSkill(Skill skill) {
		this.skill = skill;
	}

	@Column(name = "title", length = 45)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "statement", length = 65535)
	public String getStatement() {
		return this.statement;
	}

	public void setStatement(String statement) {
		this.statement = statement;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set getCandidateAnswerProvideds() {
		return this.candidateAnswerProvideds;
	}

	public void setCandidateAnswerProvideds(Set candidateAnswerProvideds) {
		this.candidateAnswerProvideds = candidateAnswerProvideds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set getQuestionExpectedAnswers() {
		return this.questionExpectedAnswers;
	}

	public void setQuestionExpectedAnswers(Set questionExpectedAnswers) {
		this.questionExpectedAnswers = questionExpectedAnswers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "assessment_has_question", catalog = "hiring", joinColumns = {
			@JoinColumn(name = "question_idquestion", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "assessment_idassessment", nullable = false, updatable = false) })
	public Set getAssessments() {
		return this.assessments;
	}

	public void setAssessments(Set assessments) {
		this.assessments = assessments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set getQuestionProposals() {
		return this.questionProposals;
	}

	public void setQuestionProposals(Set questionProposals) {
		this.questionProposals = questionProposals;
	}

}
