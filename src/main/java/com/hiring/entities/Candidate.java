package com.hiring.entities;
// Generated 10 oct. 2018 14:34:30 by Hibernate Tools 5.1.10.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Candidate generated by hbm2java
 */
@Entity
@Table(name = "candidate", catalog = "hiring")
public class Candidate implements java.io.Serializable {

	private int idcandidate;
	private Company company;
	private Person person;
	private String cv;
	private String availability;
	private String state;
	private String referent;
	private Byte isSubcontractor;
	private Set candidateAnswerProvideds = new HashSet(0);
	private Set interviews = new HashSet(0);
	private Set candidateHasAssessments = new HashSet(0);
	private Set candidateHasLevelInSkills = new HashSet(0);
	private Set experiences = new HashSet(0);
	private Set sectors = new HashSet(0);
	private Set preferences = new HashSet(0);
	private Set trainings = new HashSet(0);

	// Hibernate crée toujours un constructeur vide sans valeurs par défaut
	// car il utilise une API "Reflexion" qui genere les entites et qui instancie
	// ces objets
	// mais il les instancie avec un constructeur vide. S'il se rend compte que ces
	// objets
	// ont des paramètres ça créera des problèmes.

	public Candidate() {
	}

	public Candidate(int idcandidate, Company company, Person person) {
		this.idcandidate = idcandidate;
		this.company = company;
		this.person = person;
	}

	public Candidate(int idcandidate, Company company, Person person, String cv, String availability, String state,
			String referent, Byte isSubcontractor, Set candidateAnswerProvideds, Set interviews,
			Set candidateHasAssessments, Set candidateHasLevelInSkills, Set experiences, Set sectors, Set preferences,
			Set trainings) {
		this.idcandidate = idcandidate;
		this.company = company;
		this.person = person;
		this.cv = cv;
		this.availability = availability;
		this.state = state;
		this.referent = referent;
		this.isSubcontractor = isSubcontractor;
		this.candidateAnswerProvideds = candidateAnswerProvideds;
		this.interviews = interviews;
		this.candidateHasAssessments = candidateHasAssessments;
		this.candidateHasLevelInSkills = candidateHasLevelInSkills;
		this.experiences = experiences;
		this.sectors = sectors;
		this.preferences = preferences;
		this.trainings = trainings;
	}

	@Id

	@Column(name = "idcandidate", unique = true, nullable = false)
	public int getIdcandidate() {
		return this.idcandidate;
	}

	public void setIdcandidate(int idcandidate) {
		this.idcandidate = idcandidate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_idcompany", nullable = false)
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	// Pour créer ces relations, hibernate utilise ce qu'on appelle un proxy
	// Proxy est un objet de notre entité mais aulieu d'avoir l'entité dans sa
	// globalité,
	// le proxy va simuler l'entité avec uniquement l'id car pour créer une relation
	// entre deux entités
	// il nous suffit d'avoir que l'id.
	// Ce proxy a été crée pour des raisons de performance.
	// C'est pourquoi il est important de ne pas définir la classe de notre entité
	// en final
	// car ces proxy héritent des entités
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "person_idpersonn", nullable = false)
	public Person getPerson() {
		return this.person;
	}

	public void setPerson(Person person) {
		this.person = person;
	}

	@Column(name = "cv", length = 45)
	public String getCv() {
		return this.cv;
	}

	public void setCv(String cv) {
		this.cv = cv;
	}

	@Column(name = "availability", length = 25)
	public String getAvailability() {
		return this.availability;
	}

	public void setAvailability(String availability) {
		this.availability = availability;
	}

	@Column(name = "state", length = 25)
	public String getState() {
		return this.state;
	}

	public void setState(String state) {
		this.state = state;
	}

	@Column(name = "referent", length = 45)
	public String getReferent() {
		return this.referent;
	}

	public void setReferent(String referent) {
		this.referent = referent;
	}

	@Column(name = "is_subcontractor")
	public Byte getIsSubcontractor() {
		return this.isSubcontractor;
	}

	public void setIsSubcontractor(Byte isSubcontractor) {
		this.isSubcontractor = isSubcontractor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getCandidateAnswerProvideds() {
		return this.candidateAnswerProvideds;
	}

	public void setCandidateAnswerProvideds(Set candidateAnswerProvideds) {
		this.candidateAnswerProvideds = candidateAnswerProvideds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getInterviews() {
		return this.interviews;
	}

	public void setInterviews(Set interviews) {
		this.interviews = interviews;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getCandidateHasAssessments() {
		return this.candidateHasAssessments;
	}

	public void setCandidateHasAssessments(Set candidateHasAssessments) {
		this.candidateHasAssessments = candidateHasAssessments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getCandidateHasLevelInSkills() {
		return this.candidateHasLevelInSkills;
	}

	public void setCandidateHasLevelInSkills(Set candidateHasLevelInSkills) {
		this.candidateHasLevelInSkills = candidateHasLevelInSkills;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getExperiences() {
		return this.experiences;
	}

	public void setExperiences(Set experiences) {
		this.experiences = experiences;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "candidate_has_sector", catalog = "hiring", joinColumns = {
			@JoinColumn(name = "candidate_idcandidate", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "sector_idsector", nullable = false, updatable = false) })
	public Set getSectors() {
		return this.sectors;
	}

	public void setSectors(Set sectors) {
		this.sectors = sectors;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getPreferences() {
		return this.preferences;
	}

	public void setPreferences(Set preferences) {
		this.preferences = preferences;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "candidate")
	public Set getTrainings() {
		return this.trainings;
	}

	public void setTrainings(Set trainings) {
		this.trainings = trainings;
	}

}
